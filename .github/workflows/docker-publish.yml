name: Docker Image CI for GHCR (client & server)

on:
  push:
    branches: [ main ]
    tags: [ "v*" ]   # optional: build on version tags too
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  # Build-time config for the client (adjust as needed)
  VITE_API_BASE: http://localhost:3001

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        component: [ client, server ]
        include:
          - component: client
            context: ./client
            dockerfile: client/Dockerfile
            image: proxxied-client
            build-args: |
              VITE_API_BASE=${{ env.VITE_API_BASE }}
          - component: server
            context: ./server
            dockerfile: server/Dockerfile
            image: proxxied-server
            build-args: |
              # no build args

    steps:
      - name: Checkout repo + submodules
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.image }}
          tags: |
            type=raw,value=latest
            type=sha,format=long
            type=ref,event=tag
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Build and push ${{ matrix.component }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ matrix.build-args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
